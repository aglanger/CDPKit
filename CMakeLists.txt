CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12 FATAL_ERROR)

PROJECT(CDPKit)

ENABLE_TESTING()

SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_VERBOSE_MAKEFILE ON)

IF(COMMAND CMAKE_POLICY)
  CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND CMAKE_POLICY)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-deprecated-declarations")

  IF(UNIX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.0.0)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden -fvisibility-inlines-hidden")
  ENDIF(UNIX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.0.0)
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(CMAKE_VERSION VERSION_LESS "3.1")
  IF(CMAKE_COMPILER_IS_GNUCXX AND (CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.8.1 OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.8.1))
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
  ENDIF(CMAKE_COMPILER_IS_GNUCXX AND (CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.8.1 OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.8.1))
ELSE(CMAKE_VERSION VERSION_LESS "3.1")
  SET(CMAKE_CXX_STANDARD 11)
ENDIF(CMAKE_VERSION VERSION_LESS "3.1")

IF(APPLE) 
  IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
    SET(CMAKE_INSTALL_PREFIX "/Users/Shared/${PROJECT_NAME}" CACHE PATH "Install path prefix, prepended onto install directories" FORCE) 
  ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
ELSE(APPLE) 
  IF(WIN32)
    IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
      SET(CMAKE_INSTALL_PREFIX "C:/${PROJECT_NAME}" CACHE PATH "Install path prefix, prepended onto install directories" FORCE) 
    ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
  ELSE(WIN32)
    IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
	  SET(CMAKE_INSTALL_PREFIX "/opt/${PROJECT_NAME}" CACHE PATH "Install path prefix, prepended onto install directories" FORCE) 
    ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT) 
  ENDIF(WIN32)
ENDIF(APPLE)

#IF(WIN32)
#  ENABLE_LANGUAGE(RC)
#ENDIF(WIN32)

SET(CDPKIT_MAJOR_VERSION 1)
SET(CDPKIT_MINOR_VERSION 0)
SET(CDPKIT_PATCH_VERSION 0)
SET(CDPKIT_VERSION "${CDPKIT_MAJOR_VERSION}.${CDPKIT_MINOR_VERSION}.${CDPKIT_PATCH_VERSION}")

SET(CDPKIT_PROJECT_NAME_WITH_VERSION "${PROJECT_NAME}-${CDPKIT_VERSION}")

SET(CDPKIT_DATA_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Data")
SET(CDPKIT_TEST_DATA_DIR "${CDPKIT_DATA_DIR}/Testing")
SET(CDPKIT_BUILTIN_DATA_DIR "${CDPKIT_DATA_DIR}/Builtin")
SET(CDPKIT_EXTERNAL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/External")
SET(CDPKIT_CMAKE_SCRIPTS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Scripts/CMake")
SET(CDPKIT_PYTHON_SCRIPTS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Scripts/Python")
SET(CDPKIT_SHELL_SCRIPTS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Scripts/Shell")
SET(CDPKIT_GRAPHICS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Graphics")

SET(CDPKIT_LIBRARY_INSTALL_DIR Libs)
SET(CDPKIT_FRAMEWORK_INSTALL_DIR Frameworks)
SET(CDPKIT_EXECUTABLE_INSTALL_DIR Apps)
SET(CDPKIT_INCLUDE_INSTALL_DIR Include)
SET(CDPKIT_PYTHON_INSTALL_DIR Python)
SET(CDPKIT_DOC_INSTALL_DIR Doc)
SET(CDPKIT_EXTERNAL_RUNTIME_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/ExternalRuntimeLibraries")

SET(CMAKE_MODULE_PATH "${CDPKIT_CMAKE_SCRIPTS_DIR}")

SET(CMAKE_SKIP_BUILD_RPATH FALSE)
# When building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
# Add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

SET(CDPKIT_COMPILER_ID ${CMAKE_CXX_COMPILER_ID})
SET(CDPKIT_BUILD_SYSTEM ${CMAKE_SYSTEM})

# the RPATH to be used when installing

IF(APPLE)
  SET(CDPKIT_EXECUTABLE_INSTALL_RPATH "@executable_path/../../../../${CDPKIT_FRAMEWORK_INSTALL_DIR}")
  SET(CDPKIT_LIBRARY_INSTALL_RPATH "@loader_path/../${CDPKIT_LIBRARY_INSTALL_DIR}")
  SET(CDPKIT_PYTHON_MODULE_INSTALL_RPATH1 "@loader_path/../../${CDPKIT_FRAMEWORK_INSTALL_DIR}")
  SET(CDPKIT_PYTHON_MODULE_INSTALL_RPATH2 "@loader_path/../../../${CDPKIT_FRAMEWORK_INSTALL_DIR}")
  SET(CDPKIT_FRAMEWORK_INSTALL_RPATH "@loader_path/../../..")
  SET(CDPKIT_FRAMEWORK_INSTALL_NAME_DIR "@rpath")
ELSE(APPLE)
  SET(CDPKIT_EXECUTABLE_INSTALL_RPATH "$ORIGIN/../${CDPKIT_LIBRARY_INSTALL_DIR}")
  SET(CDPKIT_LIBRARY_INSTALL_RPATH "$ORIGIN")
  SET(CDPKIT_PYTHON_MODULE_INSTALL_RPATH1 "$ORIGIN/../../${CDPKIT_LIBRARY_INSTALL_DIR}")
  SET(CDPKIT_PYTHON_MODULE_INSTALL_RPATH2 "$ORIGIN/../../../${CDPKIT_LIBRARY_INSTALL_DIR}")
ENDIF(APPLE)

SET(CDPL_MAJOR_VERSION "${CDPKIT_MAJOR_VERSION}")
SET(CDPL_MINOR_VERSION "${CDPKIT_MINOR_VERSION}")
SET(CDPL_PATCH_VERSION "${CDPKIT_PATCH_VERSION}")
SET(CDPL_VERSION "${CDPKIT_VERSION}")
SET(CDPL_SO_VERSION "${CDPL_MAJOR_VERSION}.${CDPL_MINOR_VERSION}")

SET(APPS_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Apps")
SET(CDPL_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Libs/C++/Source")
SET(CDPL_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/Libs/C++/Include")
SET(CDPL_PYTHON_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/Python")

SET(CDPL_BASE_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Base")
SET(CDPL_CHEM_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Chem")
SET(CDPL_UTIL_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Util")
SET(CDPL_MATH_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Math")
SET(CDPL_VIS_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Vis")
SET(CDPL_PHARM_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Pharm")
SET(CDPL_BIOMOL_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Biomol")
SET(CDPL_GRID_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/Grid")
SET(CDPL_FORCEFIELD_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/ForceField")
SET(CDPL_CONFGEN_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/Libs/C++/Source/CDPL/ConfGen")

SET(CDPL_BUILD_DATE "00000000")

IF(WIN32)
  FIND_PROGRAM(CSCRIPT_EXECUTABLE NAMES cscript.exe cscript)
  
  IF(CSCRIPT_EXECUTABLE)
    EXECUTE_PROCESS(COMMAND "${CSCRIPT_EXECUTABLE}" "${CDPKIT_SHELL_SCRIPTS_DIR}/GetDate.vbs" "//Nologo" OUTPUT_VARIABLE CDPL_BUILD_DATE)
  ELSE(CSCRIPT_EXECUTABLE)
    MESSAGE("!! Warning: cscript.exe not found -> can't generate build date string.")
  ENDIF(CSCRIPT_EXECUTABLE)
ELSE(WIN32)
  FIND_PROGRAM(DATE_EXECUTABLE date)

  IF(DATE_EXECUTABLE)
    EXECUTE_PROCESS(COMMAND "${DATE_EXECUTABLE}" "-u" "+%Y%m%d" OUTPUT_VARIABLE CDPL_BUILD_DATE)
  ELSE(DATE_EXECUTABLE)
    MESSAGE("!! Warning: date command not found -> can't generate build date string.")
  ENDIF(DATE_EXECUTABLE)
ENDIF(WIN32)

IF(WIN32)
  SET(RUN_CXX_TESTS "${CMAKE_CURRENT_BINARY_DIR}/RunCXXTests.bat")
  SET(RUN_CXX_TESTS_IN "${CDPKIT_SHELL_SCRIPTS_DIR}/RunCXXTests.bat.in")
  SET(RUN_PYTHON_TESTS "${CMAKE_CURRENT_BINARY_DIR}/RunPythonTests.bat")
  SET(RUN_PYTHON_TESTS_IN "${CDPKIT_SHELL_SCRIPTS_DIR}/RunPythonTests.bat.in")
ELSE(WIN32)
  SET(RUN_CXX_TESTS "${CMAKE_CURRENT_BINARY_DIR}/RunCXXTests.sh")
  SET(RUN_CXX_TESTS_IN "${CDPKIT_SHELL_SCRIPTS_DIR}/RunCXXTests.sh.in")
  SET(RUN_PYTHON_TESTS "${CMAKE_CURRENT_BINARY_DIR}/RunPythonTests.sh")
  SET(RUN_PYTHON_TESTS_IN "${CDPKIT_SHELL_SCRIPTS_DIR}/RunPythonTests.sh.in")
ENDIF(WIN32)

FIND_PACKAGE(PythonInterp)

IF(NOT PYTHONINTERP_FOUND)
  MESSAGE(FATAL_ERROR "Python interpreter not found.")
ELSE(NOT PYTHONINTERP_FOUND)
  CONFIGURE_FILE("${RUN_PYTHON_TESTS_IN}" "${RUN_PYTHON_TESTS}" @ONLY)
ENDIF(NOT PYTHONINTERP_FOUND)

INCLUDE(CheckCXX11Support)
CHECK_CXX11_SUPPORT(HAVE_CXX11_SUPPORT)

IF(HAVE_CXX11_SUPPORT)
  FIND_PACKAGE(Qt5Gui)
  FIND_PACKAGE(Qt5Widgets)
  FIND_PACKAGE(Qt5PrintSupport)

  IF(NOT Qt5Gui_FOUND)
    MESSAGE("!! Warning: Qt5 not found -> can't build Qt rendering backend and Qt applications.")
  ENDIF(NOT Qt5Gui_FOUND)

ELSE(HAVE_CXX11_SUPPORT)
  MESSAGE("!! Warning: Compiler does not support the c++11 standard which is required by Qt5 -> can't build Qt rendering backend and Qt applications.")
ENDIF(HAVE_CXX11_SUPPORT)

FIND_PACKAGE(Cairo)
FIND_PACKAGE(SQLite3)
FIND_PACKAGE(Doxygen)
FIND_PACKAGE(PythonLibs)

SET(Boost_USE_MULTITHREAD ON)
SET(Boost_USE_STATIC_LIBS OFF)
FIND_PACKAGE(Boost 1.52.0 COMPONENTS date_time python unit_test_framework filesystem system
	     iostreams program_options thread atomic chrono)

IF(NOT SQLITE3_FOUND)
  MESSAGE("!! Warning: SQLite3 library not found -> can't build pharmacophore screening components.")
ENDIF(NOT SQLITE3_FOUND)

IF(NOT Boost_DATE_TIME_FOUND)
  MESSAGE(FATAL_ERROR "Boost date_time library not found.")
ENDIF(NOT Boost_DATE_TIME_FOUND)

IF(NOT Boost_THREAD_FOUND)
  MESSAGE(FATAL_ERROR "Boost thread library not found.")
ENDIF(NOT Boost_THREAD_FOUND)

IF(NOT Boost_SYSTEM_FOUND)
  MESSAGE(FATAL_ERROR "Boost system library not found.")
ENDIF(NOT Boost_SYSTEM_FOUND)

IF(NOT Boost_FILESYSTEM_FOUND)
  MESSAGE("!! Warning: Boost filesystem library not found -> dependent components won't be built.")
ENDIF(NOT Boost_FILESYSTEM_FOUND)

IF(NOT Boost_IOSTREAMS_FOUND)
  MESSAGE("!! Warning: Boost iostreams library not found -> dependent components won't be built.")
ENDIF(NOT Boost_IOSTREAMS_FOUND)

IF(NOT Boost_PROGRAM_OPTIONS_FOUND)
  MESSAGE("!! Warning: Boost program_options library not found -> commandline applications won't be built.")
ENDIF(NOT Boost_PROGRAM_OPTIONS_FOUND)

IF(NOT Boost_CHRONO_FOUND)
  MESSAGE("!! Warning: Boost chrono library not found -> commandline applications won't be built.")
ENDIF(NOT Boost_CHRONO_FOUND)

IF(NOT Boost_UNIT_TEST_FRAMEWORK_FOUND)
  MESSAGE("!! Warning: Boost unit_test_framework not found -> can't build and run C++ unit test cases.")
ELSE(NOT Boost_UNIT_TEST_FRAMEWORK_FOUND)
  CONFIGURE_FILE("${RUN_CXX_TESTS_IN}" "${RUN_CXX_TESTS}" @ONLY)
ENDIF(NOT Boost_UNIT_TEST_FRAMEWORK_FOUND)

IF(Boost_PYTHON_FOUND AND PYTHONLIBS_FOUND)
  SET(BUILD_PYTHON_MODULES TRUE)
ELSE(Boost_PYTHON_FOUND AND PYTHONLIBS_FOUND)
  MESSAGE("!! Warning: Python library and/or Boost python library not found -> can't build CDPL Python bindings.")
  SET(BUILD_PYTHON_MODULES FALSE)
ENDIF(Boost_PYTHON_FOUND AND PYTHONLIBS_FOUND)

IF(NOT CAIRO_FOUND)
  MESSAGE("!! Warning: CAIRO library not found -> can't build Cairo rendering backend.")
ELSE(NOT CAIRO_FOUND)
  INCLUDE(CheckFunctionExists)

  SET(CMAKE_REQUIRED_INCLUDES "${CAIRO_INCLUDE_DIR}")
  SET(CMAKE_REQUIRED_LIBRARIES "${CAIRO_LIBRARIES}")

  CHECK_FUNCTION_EXISTS(cairo_surface_write_to_png_stream HAVE_CAIRO_PNG_SUPPORT)
  CHECK_FUNCTION_EXISTS(cairo_ps_surface_create HAVE_CAIRO_PS_SUPPORT)
  CHECK_FUNCTION_EXISTS(cairo_pdf_surface_create HAVE_CAIRO_PDF_SUPPORT)
  CHECK_FUNCTION_EXISTS(cairo_svg_surface_create HAVE_CAIRO_SVG_SUPPORT)
ENDIF(NOT CAIRO_FOUND)

IF(NOT DOXYGEN_EXECUTABLE)
  MESSAGE("!! Warning: Doxygen not found -> can't generate CDPL API documentation.")
  SET(HAVE_DOT NO)
ELSE(NOT DOXYGEN_EXECUTABLE)
  IF(DOXYGEN_DOT_EXECUTABLE)
    SET(HAVE_DOT YES)
  ELSE(DOXYGEN_DOT_EXECUTABLE)
    SET(HAVE_DOT NO)
  ENDIF(DOXYGEN_DOT_EXECUTABLE)
ENDIF(NOT DOXYGEN_EXECUTABLE)

SET(HAVE_CAIRO ${CAIRO_FOUND})
SET(HAVE_SQLITE3 ${SQLITE3_FOUND})
SET(HAVE_BOOST_FILESYSTEM ${Boost_FILESYSTEM_FOUND})
SET(HAVE_BOOST_IOSTREAMS ${Boost_IOSTREAMS_FOUND})
SET(HAVE_QT ${Qt5Gui_FOUND})

INCLUDE(CheckTypeSize)
CHECK_TYPE_SIZE("long int" SIZEOF_LONG_INT)
CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE("float" SIZEOF_FLOAT)
CHECK_TYPE_SIZE("double" SIZEOF_DOUBLE)
CHECK_TYPE_SIZE("size_t" SIZEOF_SIZE_T)

IF(SIZEOF_LONG_INT LESS 4)
  MESSAGE(FATAL_ERROR "sizeof(long int) < 4.")
ENDIF(SIZEOF_LONG_INT LESS 4)

IF(SIZEOF_UNSIGNED_INT LESS 4)
  MESSAGE(FATAL_ERROR "sizeof(unsigned int) < 4.")
ENDIF(SIZEOF_UNSIGNED_INT LESS 4)

IF(NOT SIZEOF_FLOAT EQUAL 4)
  MESSAGE(FATAL_ERROR "sizeof(float) != 4.")
ENDIF(NOT SIZEOF_FLOAT EQUAL 4)

IF(NOT SIZEOF_DOUBLE EQUAL 8)
  MESSAGE(FATAL_ERROR "sizeof(double) != 8.")
ENDIF(NOT SIZEOF_DOUBLE EQUAL 8)

IF(SIZEOF_SIZE_T LESS 4)
  MESSAGE(FATAL_ERROR "sizeof(size_t) < 4.")
ENDIF(SIZEOF_SIZE_T LESS 4)


CONFIGURE_FILE("${CDPL_INCLUDE_DIR}/CDPL/Config.hpp.in" "${CDPL_INCLUDE_DIR}/CDPL/Config.hpp") 
CONFIGURE_FILE("${CDPL_INCLUDE_DIR}/CDPL/Version.hpp.in" "${CDPL_INCLUDE_DIR}/CDPL/Version.hpp") 
CONFIGURE_FILE("${CDPKIT_CMAKE_SCRIPTS_DIR}/CMakeUninstall.cmake.in" "${CMAKE_CURRENT_BINARY_DIR}/CMakeUninstall.cmake" @ONLY)

ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/CMakeUninstall.cmake")

INCLUDE_DIRECTORIES("${CDPL_INCLUDE_DIR}" "${Boost_INCLUDE_DIR}")


# CPack related setup

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CDPKit - The Chemical Data Processing Toolkit")
SET(CPACK_PACKAGE_VENDOR "CDPKit Development Team")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copying.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR "${CDPKIT_MAJOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_MINOR "${CDPKIT_MINOR_VERSION}")
SET(CPACK_PACKAGE_VERSION_PATCH "${CDPKIT_PATCH_VERSION}")
SET(CPACK_PACKAGE_VERSION "${CDPKIT_VERSION}")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
SET(CPACK_PACKAGE_FILE_NAME "${CDPKIT_PROJECT_NAME_WITH_VERSION}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
SET(CPACK_PACKAGE_DEFAULT_LOCATION "${CMAKE_INSTALL_PREFIX}")
SET(CPACK_PACKAGING_INSTALL_PREFIX "/")
SET(CPACK_PACKAGE_RELOCATABLE TRUE) 
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CDPKIT_PROJECT_NAME_WITH_VERSION}")
SET(CPACK_SOURCE_GENERATOR "TGZ")
SET(CPACK_SOURCE_IGNORE_FILES "/[.]git/;/[.]svn/;/CVS/;.*#$;.*~$;cscope.*")

SET(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "Applications")

SET(CPACK_COMPONENT_CDPLSTATICLIBRARIES_DISPLAY_NAME "Static Libraries")
SET(CPACK_COMPONENT_CDPLHEADERFILES_DISPLAY_NAME "Header Files")
SET(CPACK_COMPONENT_CDPLAPIDOCUMENTATION_DISPLAY_NAME "API Documentation")
SET(CPACK_COMPONENT_CDPLPYTHONMODULES_DISPLAY_NAME "Python Bindings")
SET(CPACK_COMPONENT_CDPLPYTHONAPIDOCUMENTATION_DISPLAY_NAME "API Documentation")

SET(CPACK_COMPONENT_CDPLHEADERFILES_GROUP CXXDevelopment)
SET(CPACK_COMPONENT_CDPLAPIDOCUMENTATION_GROUP CXXDevelopment)
SET(CPACK_COMPONENT_CDPLSTATICLIBRARIES_GROUP CXXDevelopment)
SET(CPACK_COMPONENT_CDPLPYTHONMODULES_GROUP PythonDevelopment)
SET(CPACK_COMPONENT_CDPLPYTHONAPIDOCUMENTATION_GROUP PythonDevelopment)

SET(CPACK_COMPONENT_GROUP_CXXDEVELOPMENT_DISPLAY_NAME "CDPL C++-Development")
SET(CPACK_COMPONENT_GROUP_PYTHONDEVELOPMENT_DISPLAY_NAME "CDPL Python-Development")

IF(WIN32)
  SET(CPACK_COMPONENT_CDPLSHAREDLIBRARIES_DISPLAY_NAME "Dynamic Runtime Libraries")
  SET(CPACK_COMPONENT_CDPLIMPORTLIBRARIES_DISPLAY_NAME "DLL Import Libraries")

  SET(CPACK_COMPONENT_CDPLIMPORTLIBRARIES_GROUP CXXDevelopment)

  SET(CPACK_COMPONENT_APPLICATIONS_DEPENDS CDPLSharedLibraries)
  SET(CPACK_COMPONENT_CDPLPYTHONMODULES_DEPENDS CDPLSharedLibraries)

  SET(CPACK_COMPONENTS_ALL 
      Applications 
      CDPLSharedLibraries
      CDPLImportLibraries
      CDPLStaticLibraries
      CDPLHeaderFiles
      CDPLAPIDocumentation
      CDPLPythonModules
      CDPLPythonAPIDocumentation
     )

  SET(CPACK_GENERATOR "NSIS")
  SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${PROJECT_NAME}")
  SET(CPACK_NSIS_MODIFY_PATH ON)
  SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
  SET(CPACK_PACKAGE_EXECUTABLES "chox;ChOX")
  SET(CPACK_CREATE_DESKTOP_LINKS "ChOx")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME "${CDPKIT_EXECUTABLE_INSTALL_DIR}\\\\ChOx.exe")
  SET(CPACK_NSIS_MENU_LINKS
      "Doc/C++-API/html/index.html" "C++-API Documentation"
      "Doc/Python-API/html/index.html" "Python-API Documentation"
     )
  SET(CPACK_NSIS_MUI_ICON "${CDPKIT_GRAPHICS_DIR}/Icon.ico")
  SET(CPACK_NSIS_MUI_UNIICON "${CDPKIT_GRAPHICS_DIR}/Icon.ico")
  SET(CPACK_PACKAGE_DEFAULT_LOCATION "C:/")

  IF(NOT EXISTS "${CDPKIT_EXTERNAL_RUNTIME_LIBRARY_DIR}")
    FILE(MAKE_DIRECTORY "${CDPKIT_EXTERNAL_RUNTIME_LIBRARY_DIR}")
  ENDIF(NOT EXISTS "${CDPKIT_EXTERNAL_RUNTIME_LIBRARY_DIR}")

  INSTALL(DIRECTORY "${CDPKIT_EXTERNAL_RUNTIME_LIBRARY_DIR}/" 
          DESTINATION "${CDPKIT_EXECUTABLE_INSTALL_DIR}"
	  COMPONENT CDPLSharedLibraries
          FILES_MATCHING PATTERN "*.dll"
         )
ELSE(WIN32)
  IF(APPLE)
    SET(CPACK_COMPONENT_CDPLFRAMEWORKS_DISPLAY_NAME "Frameworks")

    SET(CPACK_COMPONENT_CDPLFRAMEWORKS_GROUP CXXDevelopment)

    SET(CPACK_COMPONENT_CDPLPYTHONMODULES_DEPENDS CDPLFrameworks)

    SET(CPACK_COMPONENTS_ALL 
        Applications 
        CDPLFrameworks
        CDPLStaticLibraries
        CDPLHeaderFiles
        CDPLAPIDocumentation
        CDPLPythonModules
        CDPLPythonAPIDocumentation
       )

    SET(CPACK_GENERATOR "PackageMaker")
  ELSE(APPLE)
    FILE(READ "${CDPKIT_SHELL_SCRIPTS_DIR}/CPackSTGZHeader.sh.in" STGZ_HEADER_CONTENT)
    STRING(REPLACE "#CDPKIT_EXECUTABLE_INSTALL_DIR#" "${CDPKIT_EXECUTABLE_INSTALL_DIR}" STGZ_HEADER_CONTENT "${STGZ_HEADER_CONTENT}")
    FILE(WRITE "${CMAKE_CURRENT_BINARY_DIR}/CPackSTGZHeader.sh.in" "${STGZ_HEADER_CONTENT}")

    SET(CPACK_GENERATOR "STGZ")
    SET(CPACK_STGZ_HEADER_FILE "${CMAKE_CURRENT_BINARY_DIR}/CPackSTGZHeader.sh.in")
  ENDIF(APPLE)
ENDIF(WIN32)

INCLUDE(CPack)


ADD_SUBDIRECTORY(External) 
ADD_SUBDIRECTORY(Libs)
ADD_SUBDIRECTORY(Apps)
ADD_SUBDIRECTORY(Doc)
