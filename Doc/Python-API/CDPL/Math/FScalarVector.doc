/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief FScalarVector.
 */
public class FScalarVector extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public None __init__(object self, FScalarVector v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public None __init__(object self, int n, float v = 0.0) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public int getObjectID(FScalarVector self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public int getSize(FScalarVector self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public float getElement(FScalarVector self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public bool isEmpty(FScalarVector self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public None swap(FScalarVector self, FScalarVector v) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public None resize(FScalarVector self, int n) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public FScalarVector assign(FScalarVector self, FScalarVector v) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public str __str__(FScalarVector self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public FScalarVector __pos__(FScalarVector self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public float __call__(FScalarVector self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public int __len__(FScalarVector self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public bool __ne__(FScalarVector self, FScalarVector v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public bool __ne__(FScalarVector self, ConstFVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public float __getitem__(FScalarVector self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __add__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public bool __eq__(FScalarVector self, FScalarVector v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public bool __eq__(FScalarVector self, ConstFVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%FScalarVector</tt> instance.
	 */
	public ConstFVectorExpression __sub__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
