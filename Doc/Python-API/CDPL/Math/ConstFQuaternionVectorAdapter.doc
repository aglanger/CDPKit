/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstFQuaternionVectorAdapter.
 */
public class ConstFQuaternionVectorAdapter extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public None __init__(object self, ConstFQuaternionVectorAdapter a) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public None __init__(object self, ConstFQuaternionExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public int getObjectID(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public int getSize(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public float getElement(ConstFQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public bool isEmpty(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFQuaternionExpression getData(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public str __str__(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFQuaternionVectorAdapter __pos__(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public float __call__(ConstFQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public int __len__(ConstFQuaternionVectorAdapter self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public bool __ne__(ConstFQuaternionVectorAdapter self, ConstFQuaternionVectorAdapter a) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public bool __ne__(ConstFQuaternionVectorAdapter self, ConstFVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public float __getitem__(ConstFQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __add__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public bool __eq__(ConstFQuaternionVectorAdapter self, ConstFQuaternionVectorAdapter a) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public bool __eq__(ConstFQuaternionVectorAdapter self, ConstFVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstFQuaternionVectorAdapter</tt> instance.
	 */
	public ConstFVectorExpression __sub__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief data.
	 */
	public None data;
}
