/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ULVector.
 */
public class ULVector extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None __init__(object self, ULVector v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None __init__(object self, int n) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None __init__(object self, int n, int v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int getObjectID(ULVector self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int getSize(ULVector self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int getElement(ULVector self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public bool isEmpty(ULVector self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None swap(ULVector self, ULVector v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None setElement(ULVector self, int i, int v) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None resize(ULVector self, int n, int v = 0) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None clear(ULVector self, int v = 0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector assign(ULVector self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector assign(ULVector self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector assign(ULVector self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector assign(ULVector self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector assign(ULVector self, ULVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __isub__(ULVector self, ULVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __isub__(ULVector self, ConstULVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public str __str__(ULVector self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __pos__(ULVector self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int __call__(ULVector self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int __len__(ULVector self) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public bool __ne__(ULVector self, ULVector v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public bool __ne__(ULVector self, ConstULVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public int __getitem__(ULVector self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __idiv__(ULVector self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public None __setitem__(ULVector self, int i, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __add__(object self, ConstULVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public bool __eq__(ULVector self, ULVector v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public bool __eq__(ULVector self, ConstULVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __imul__(ULVector self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __iadd__(ULVector self, ULVector v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ULVector __iadd__(ULVector self, ConstULVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ULVector</tt> instance.
	 */
	public ConstULVectorExpression __sub__(object self, ConstULVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
