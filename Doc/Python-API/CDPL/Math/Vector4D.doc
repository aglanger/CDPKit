/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Vector4D.
 */
public class Vector4D extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None __init__(object self, Vector4D v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None __init__(object self, float v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public int getObjectID(Vector4D self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public int getSize(Vector4D self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public float getElement(Vector4D self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public bool isEmpty(Vector4D self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None swap(Vector4D self, Vector4D v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None setElement(Vector4D self, int i, float v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None clear(Vector4D self, float v = 0.0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D assign(Vector4D self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D assign(Vector4D self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D assign(Vector4D self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D assign(Vector4D self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D assign(Vector4D self, Vector4D v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __isub__(Vector4D self, Vector4D v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __isub__(Vector4D self, ConstDVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public str __str__(Vector4D self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __pos__(Vector4D self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public float __call__(Vector4D self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public int __len__(Vector4D self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public bool __ne__(Vector4D self, Vector4D v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public bool __ne__(Vector4D self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public float __getitem__(Vector4D self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __idiv__(Vector4D self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public None __setitem__(Vector4D self, int i, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public bool __eq__(Vector4D self, Vector4D v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public bool __eq__(Vector4D self, ConstDVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __imul__(Vector4D self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __iadd__(Vector4D self, Vector4D v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public Vector4D __iadd__(Vector4D self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Vector4D</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
