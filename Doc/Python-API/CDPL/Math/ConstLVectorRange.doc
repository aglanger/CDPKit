/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstLVectorRange.
 */
public class ConstLVectorRange extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public None __init__(object self, ConstLVectorRange r) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public None __init__(object self, ConstLVectorExpression e, Range r) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int getObjectID(ConstLVectorRange self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int getSize(ConstLVectorRange self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int getElement(ConstLVectorRange self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public bool isEmpty(ConstLVectorRange self) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression getData(ConstLVectorRange self) {}

	/**
	 * \brief getStart.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int getStart(ConstLVectorRange self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public str __str__(ConstLVectorRange self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorRange __pos__(ConstLVectorRange self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int __call__(ConstLVectorRange self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int __len__(ConstLVectorRange self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public bool __ne__(ConstLVectorRange self, ConstLVectorRange r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public bool __ne__(ConstLVectorRange self, ConstLVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public int __getitem__(ConstLVectorRange self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __add__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public bool __eq__(ConstLVectorRange self, ConstLVectorRange r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public bool __eq__(ConstLVectorRange self, ConstLVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstLVectorRange</tt> instance.
	 */
	public ConstLVectorExpression __sub__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief start.
	 */
	public None start;

	/**
	 * \brief data.
	 */
	public None data;
}
