/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstFVectorExpression.
 */
public class ConstFVectorExpression extends Boost.Python.instance {

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public int getObjectID(ConstFVectorExpression self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public int getSize(ConstFVectorExpression self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public float getElement(ConstFVectorExpression self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public bool isEmpty(ConstFVectorExpression self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public str __str__(ConstFVectorExpression self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __pos__(ConstFVectorExpression self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public float __call__(ConstFVectorExpression self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public int __len__(ConstFVectorExpression self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public bool __ne__(ConstFVectorExpression self, ConstFVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public float __getitem__(ConstFVectorExpression self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __add__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public bool __eq__(ConstFVectorExpression self, ConstFVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstFVectorExpression</tt> instance.
	 */
	public ConstFVectorExpression __sub__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
