/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Vector4L.
 */
public class Vector4L extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None __init__(object self, Vector4L v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None __init__(object self, int v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int getObjectID(Vector4L self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int getSize(Vector4L self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int getElement(Vector4L self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public bool isEmpty(Vector4L self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None swap(Vector4L self, Vector4L v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None setElement(Vector4L self, int i, int v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None clear(Vector4L self, int v = 0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L assign(Vector4L self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L assign(Vector4L self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L assign(Vector4L self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L assign(Vector4L self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L assign(Vector4L self, Vector4L v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __isub__(Vector4L self, Vector4L v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __isub__(Vector4L self, ConstLVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public str __str__(Vector4L self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __pos__(Vector4L self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int __call__(Vector4L self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int __len__(Vector4L self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public bool __ne__(Vector4L self, Vector4L v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public bool __ne__(Vector4L self, ConstLVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public int __getitem__(Vector4L self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __idiv__(Vector4L self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public None __setitem__(Vector4L self, int i, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __add__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public bool __eq__(Vector4L self, Vector4L v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public bool __eq__(Vector4L self, ConstLVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __imul__(Vector4L self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __iadd__(Vector4L self, Vector4L v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public Vector4L __iadd__(Vector4L self, ConstLVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Vector4L</tt> instance.
	 */
	public ConstLVectorExpression __sub__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
