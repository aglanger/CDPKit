/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief DVector.
 */
public class DVector extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None __init__(object self, DVector v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None __init__(object self, int n) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None __init__(object self, int n, float v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public int getObjectID(DVector self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public int getSize(DVector self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public float getElement(DVector self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public bool isEmpty(DVector self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None swap(DVector self, DVector v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None setElement(DVector self, int i, float v) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None resize(DVector self, int n, float v = 0.0) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None clear(DVector self, float v = 0.0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector assign(DVector self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector assign(DVector self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector assign(DVector self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector assign(DVector self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector assign(DVector self, DVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __isub__(DVector self, DVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __isub__(DVector self, ConstDVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public str __str__(DVector self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __pos__(DVector self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public float __call__(DVector self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public int __len__(DVector self) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public bool __ne__(DVector self, DVector v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public bool __ne__(DVector self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public float __getitem__(DVector self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __idiv__(DVector self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public None __setitem__(DVector self, int i, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public bool __eq__(DVector self, DVector v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public bool __eq__(DVector self, ConstDVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __imul__(DVector self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __iadd__(DVector self, DVector v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public DVector __iadd__(DVector self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%DVector</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
