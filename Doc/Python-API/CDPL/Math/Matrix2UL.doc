/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Matrix2UL.
 */
public class Matrix2UL extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None __init__(object self, int v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None __init__(object self, Matrix2UL m) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstFMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstDMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstLMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstULMatrixExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int getObjectID(Matrix2UL self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int getElement(Matrix2UL self, int i, int j) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public bool isEmpty(Matrix2UL self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None swap(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief getSize1.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int getSize1(Matrix2UL self) {}

	/**
	 * \brief getSize2.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int getSize2(Matrix2UL self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None setElement(Matrix2UL self, int i, int j, int v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None clear(Matrix2UL self, int v = 0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL assign(Matrix2UL self, ConstFMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL assign(Matrix2UL self, ConstDMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL assign(Matrix2UL self, ConstLMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL assign(Matrix2UL self, ConstULMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL assign(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __isub__(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __isub__(Matrix2UL self, ConstULMatrixExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public str __str__(Matrix2UL self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __pos__(Matrix2UL self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int __call__(Matrix2UL self, int i, int j) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int __len__(Matrix2UL self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public bool __ne__(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public bool __ne__(Matrix2UL self, ConstULMatrixExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public int __getitem__(Matrix2UL self, tuple ij) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __idiv__(Matrix2UL self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public None __setitem__(Matrix2UL self, tuple ij, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __add__(object self, ConstULMatrixExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public bool __eq__(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public bool __eq__(Matrix2UL self, ConstULMatrixExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __imul__(Matrix2UL self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __iadd__(Matrix2UL self, Matrix2UL m) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public Matrix2UL __iadd__(Matrix2UL self, ConstULMatrixExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __mul__(object self, int t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Matrix2UL</tt> instance.
	 */
	public ConstULMatrixExpression __sub__(object self, ConstULMatrixExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size1.
	 */
	public None size1;

	/**
	 * \brief size2.
	 */
	public None size2;
}
