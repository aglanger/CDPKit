/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Vector4F.
 */
public class Vector4F extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None __init__(object self, Vector4F v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None __init__(object self, float v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public int getObjectID(Vector4F self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public int getSize(Vector4F self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public float getElement(Vector4F self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public bool isEmpty(Vector4F self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None swap(Vector4F self, Vector4F v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None setElement(Vector4F self, int i, float v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None clear(Vector4F self, float v = 0.0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F assign(Vector4F self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F assign(Vector4F self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F assign(Vector4F self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F assign(Vector4F self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F assign(Vector4F self, Vector4F v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __isub__(Vector4F self, Vector4F v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __isub__(Vector4F self, ConstFVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public str __str__(Vector4F self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __pos__(Vector4F self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public float __call__(Vector4F self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public int __len__(Vector4F self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public bool __ne__(Vector4F self, Vector4F v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public bool __ne__(Vector4F self, ConstFVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public float __getitem__(Vector4F self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __idiv__(Vector4F self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public None __setitem__(Vector4F self, int i, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __add__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public bool __eq__(Vector4F self, Vector4F v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public bool __eq__(Vector4F self, ConstFVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __imul__(Vector4F self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __iadd__(Vector4F self, Vector4F v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public Vector4F __iadd__(Vector4F self, ConstFVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Vector4F</tt> instance.
	 */
	public ConstFVectorExpression __sub__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
