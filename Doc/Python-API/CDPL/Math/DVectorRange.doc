/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief DVectorRange.
 */
public class DVectorRange extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public None __init__(object self, DVectorRange r) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public None __init__(object self, DVectorExpression e, Range r) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public int getObjectID(DVectorRange self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public int getSize(DVectorRange self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public float getElement(DVectorRange self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public bool isEmpty(DVectorRange self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public None swap(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorExpression getData(DVectorRange self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public None setElement(DVectorRange self, int i, float v) {}

	/**
	 * \brief getStart.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public int getStart(DVectorRange self) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange assign(DVectorRange self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange assign(DVectorRange self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange assign(DVectorRange self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange assign(DVectorRange self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange assign(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __isub__(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __isub__(DVectorRange self, ConstDVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public str __str__(DVectorRange self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __pos__(DVectorRange self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public float __call__(DVectorRange self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public int __len__(DVectorRange self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public bool __ne__(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public bool __ne__(DVectorRange self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public float __getitem__(DVectorRange self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __idiv__(DVectorRange self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public None __setitem__(DVectorRange self, int i, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public bool __eq__(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public bool __eq__(DVectorRange self, ConstDVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __imul__(DVectorRange self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __iadd__(DVectorRange self, DVectorRange r) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public DVectorRange __iadd__(DVectorRange self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%DVectorRange</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief start.
	 */
	public None start;

	/**
	 * \brief data.
	 */
	public None data;
}
