/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief DMatrixRow.
 */
public class DMatrixRow extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public None __init__(object self, DMatrixRow mr) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public None __init__(object self, DMatrixExpression e, int i) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public int getObjectID(DMatrixRow self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public int getSize(DMatrixRow self) {}

	/**
	 * \brief getIndex.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public int getIndex(DMatrixRow self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public float getElement(DMatrixRow self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public bool isEmpty(DMatrixRow self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public None swap(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixExpression getData(DMatrixRow self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public None setElement(DMatrixRow self, int i, float v) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow assign(DMatrixRow self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow assign(DMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow assign(DMatrixRow self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow assign(DMatrixRow self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow assign(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __isub__(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __isub__(DMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public str __str__(DMatrixRow self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __pos__(DMatrixRow self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public float __call__(DMatrixRow self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public int __len__(DMatrixRow self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public bool __ne__(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public bool __ne__(DMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public float __getitem__(DMatrixRow self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __idiv__(DMatrixRow self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public None __setitem__(DMatrixRow self, int i, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public bool __eq__(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public bool __eq__(DMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __imul__(DMatrixRow self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __iadd__(DMatrixRow self, DMatrixRow r) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public DMatrixRow __iadd__(DMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%DMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief index.
	 */
	public None index;

	/**
	 * \brief data.
	 */
	public None data;
}
