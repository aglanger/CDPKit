/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief LIdentityMatrix.
 */
public class LIdentityMatrix extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public None __init__(object self, LIdentityMatrix m) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public None __init__(object self, int m, int n) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int getObjectID(LIdentityMatrix self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int getElement(LIdentityMatrix self, int i, int j) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public bool isEmpty(LIdentityMatrix self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public None swap(LIdentityMatrix self, LIdentityMatrix m) {}

	/**
	 * \brief getSize1.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int getSize1(LIdentityMatrix self) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public None resize(LIdentityMatrix self, int m, int n) {}

	/**
	 * \brief getSize2.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int getSize2(LIdentityMatrix self) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public LIdentityMatrix assign(LIdentityMatrix self, LIdentityMatrix m) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public str __str__(LIdentityMatrix self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public LIdentityMatrix __pos__(LIdentityMatrix self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int __call__(LIdentityMatrix self, int i, int j) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int __len__(LIdentityMatrix self) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __mul__(object self, int t) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public bool __ne__(LIdentityMatrix self, LIdentityMatrix m) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public bool __ne__(LIdentityMatrix self, ConstLMatrixExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public int __getitem__(LIdentityMatrix self, tuple ij) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __add__(object self, ConstLMatrixExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public bool __eq__(LIdentityMatrix self, LIdentityMatrix m) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public bool __eq__(LIdentityMatrix self, ConstLMatrixExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __div__(object self, int t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%LIdentityMatrix</tt> instance.
	 */
	public ConstLMatrixExpression __sub__(object self, ConstLMatrixExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size1.
	 */
	public None size1;

	/**
	 * \brief size2.
	 */
	public None size2;
}
