/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief AffineTransform4D.
 */
public class AffineTransform4D extends Boost.Python.instance {

	/**
	 * \brief Column.
	 */
	public class Column extends Boost.Python.instance {

		/**
		 * \brief __init__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public None __init__(object self, Column col) {}

		/**
		 * \brief getObjectID.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public int getObjectID(Column self) {}

		/**
		 * \brief getSize.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public int getSize(Column self) {}

		/**
		 * \brief getElement.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public float getElement(Column self, int idx) {}

		/**
		 * \brief swap.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public None swap(Column self, Column vec) {}

		/**
		 * \brief setElement.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public None setElement(Column self, int idx, float value) {}

		/**
		 * \brief copy.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column copy(Column arg1, Column vec) {}

		/**
		 * \brief copy.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column copy(Column arg1, Vector4D vec) {}

		/**
		 * \brief clear.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public None clear(Column self) {}

		/**
		 * \brief __str__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public str __str__(Column self) {}

		/**
		 * \brief __call__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public float __call__(Column self, int idx) {}

		/**
		 * \brief __len__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public int __len__(Column self) {}

		/**
		 * \brief __isub__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column __isub__(Column self, Column vec) {}

		/**
		 * \brief __getitem__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public float __getitem__(Column self, int idx) {}

		/**
		 * \brief __idiv__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column __idiv__(Column self, float value) {}

		/**
		 * \brief __setitem__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public None __setitem__(Column self, int idx, float value) {}

		/**
		 * \brief __imul__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column __imul__(Column self, float value) {}

		/**
		 * \brief __iadd__.
		 * \param self The <tt>%Column</tt> instance.
		 */
		public Column __iadd__(Column self, Column vec) {}

		/**
		 * \brief objectID.
		 */
		public None objectID;

		/**
		 * \brief size.
		 */
		public None size;
	}

	/**
	 * \brief Row.
	 */
	public class Row extends Boost.Python.instance {

		/**
		 * \brief __init__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public None __init__(object self, Row row) {}

		/**
		 * \brief getObjectID.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public int getObjectID(Row self) {}

		/**
		 * \brief getSize.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public int getSize(Row self) {}

		/**
		 * \brief getElement.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public float getElement(Row self, int idx) {}

		/**
		 * \brief swap.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public None swap(Row self, Row vec) {}

		/**
		 * \brief setElement.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public None setElement(Row self, int idx, float value) {}

		/**
		 * \brief copy.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row copy(Row arg1, Row vec) {}

		/**
		 * \brief copy.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row copy(Row arg1, Vector4D vec) {}

		/**
		 * \brief clear.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public None clear(Row self) {}

		/**
		 * \brief __str__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public str __str__(Row self) {}

		/**
		 * \brief __call__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public float __call__(Row self, int idx) {}

		/**
		 * \brief __len__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public int __len__(Row self) {}

		/**
		 * \brief __isub__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row __isub__(Row self, Row vec) {}

		/**
		 * \brief __getitem__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public float __getitem__(Row self, int idx) {}

		/**
		 * \brief __idiv__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row __idiv__(Row self, float value) {}

		/**
		 * \brief __setitem__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public None __setitem__(Row self, int idx, float value) {}

		/**
		 * \brief __imul__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row __imul__(Row self, float value) {}

		/**
		 * \brief __iadd__.
		 * \param self The <tt>%Row</tt> instance.
		 */
		public Row __iadd__(Row self, Row vec) {}

		/**
		 * \brief objectID.
		 */
		public None objectID;

		/**
		 * \brief size.
		 */
		public None size;
	}

	/**
	 * \brief __init__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None __init__(object self, AffineTransform4D xform) {}

	/**
	 * \brief getColumn.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public Column getColumn(AffineTransform4D self, int col_idx) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public int getObjectID(AffineTransform4D self) {}

	/**
	 * \brief getNumRows.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public int getNumRows(AffineTransform4D self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public float getElement(AffineTransform4D self, int row_idx, int col_idx) {}

	/**
	 * \brief getRow.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public Row getRow(AffineTransform4D self, int row_idx) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None swap(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief concatenate.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D concatenate(AffineTransform4D self, AffineTransform4D xform) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None setElement(AffineTransform4D self, int row_idx, int col_idx, float value) {}

	/**
	 * \brief copy.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D copy(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None clear(AffineTransform4D self) {}

	/**
	 * \brief getNumColumns.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public int getNumColumns(AffineTransform4D self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public bool __ne__(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public str __str__(AffineTransform4D self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public float __call__(AffineTransform4D self, int row_idx, int col_idx) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public Row __call__(AffineTransform4D self, int row_idx) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public int __len__(AffineTransform4D self) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D __isub__(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public float __getitem__(AffineTransform4D self, tuple indices) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public Row __getitem__(AffineTransform4D self, int row_idx) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D __idiv__(AffineTransform4D self, float value) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public None __setitem__(AffineTransform4D self, tuple indices, float value) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public bool __eq__(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D __imul__(AffineTransform4D self, float value) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%AffineTransform4D</tt> instance.
	 */
	public AffineTransform4D __iadd__(AffineTransform4D self, AffineTransform4D mtx) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief numColumns.
	 */
	public None numColumns;

	/**
	 * \brief numRows.
	 */
	public None numRows;
}
