/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief LVector.
 */
public class LVector extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None __init__(object self, LVector v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None __init__(object self, int n) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None __init__(object self, int n, int v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int getObjectID(LVector self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int getSize(LVector self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int getElement(LVector self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public bool isEmpty(LVector self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None swap(LVector self, LVector v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None setElement(LVector self, int i, int v) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None resize(LVector self, int n, int v = 0) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None clear(LVector self, int v = 0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector assign(LVector self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector assign(LVector self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector assign(LVector self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector assign(LVector self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector assign(LVector self, LVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __isub__(LVector self, LVector v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __isub__(LVector self, ConstLVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public str __str__(LVector self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __pos__(LVector self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int __call__(LVector self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int __len__(LVector self) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public bool __ne__(LVector self, LVector v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public bool __ne__(LVector self, ConstLVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public int __getitem__(LVector self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __idiv__(LVector self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public None __setitem__(LVector self, int i, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __add__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public bool __eq__(LVector self, LVector v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public bool __eq__(LVector self, ConstLVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __imul__(LVector self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __iadd__(LVector self, LVector v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public LVector __iadd__(LVector self, ConstLVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%LVector</tt> instance.
	 */
	public ConstLVectorExpression __sub__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
