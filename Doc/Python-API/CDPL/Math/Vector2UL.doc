/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Vector2UL.
 */
public class Vector2UL extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None __init__(object self, Vector2UL v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None __init__(object self, int v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstFVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstDVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstLVectorExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public object __init__(object arg1, ConstULVectorExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int getObjectID(Vector2UL self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int getSize(Vector2UL self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int getElement(Vector2UL self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public bool isEmpty(Vector2UL self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None swap(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None setElement(Vector2UL self, int i, int v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None clear(Vector2UL self, int v = 0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL assign(Vector2UL self, ConstFVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL assign(Vector2UL self, ConstDVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL assign(Vector2UL self, ConstLVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL assign(Vector2UL self, ConstULVectorExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL assign(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __isub__(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __isub__(Vector2UL self, ConstULVectorExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public str __str__(Vector2UL self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __pos__(Vector2UL self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int __call__(Vector2UL self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int __len__(Vector2UL self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public bool __ne__(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public bool __ne__(Vector2UL self, ConstULVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public int __getitem__(Vector2UL self, int i) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __idiv__(Vector2UL self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public None __setitem__(Vector2UL self, int i, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __add__(object self, ConstULVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public bool __eq__(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public bool __eq__(Vector2UL self, ConstULVectorExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __imul__(Vector2UL self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __iadd__(Vector2UL self, Vector2UL v) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public Vector2UL __iadd__(Vector2UL self, ConstULVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Vector2UL</tt> instance.
	 */
	public ConstULVectorExpression __sub__(object self, ConstULVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
