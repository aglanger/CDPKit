/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief DQuaternion.
 */
public class DQuaternion extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None __init__(object self, DQuaternion q) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None __init__(object self, float c1, float c2 = 0.0, float c3 = 0.0, float c4 = 0.0) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public object __init__(object arg1, ConstFQuaternionExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public object __init__(object arg1, ConstDQuaternionExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public object __init__(object arg1, ConstLQuaternionExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public object __init__(object arg1, ConstULQuaternionExpression e) {}

	/**
	 * \brief set.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None set(DQuaternion self, float c1 = 0.0, float c2 = 0.0, float c3 = 0.0, float c4 = 0.0) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public int getObjectID(DQuaternion self) {}

	/**
	 * \brief getC4.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public float getC4(DQuaternion self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None swap(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief setC4.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None setC4(DQuaternion self, float v) {}

	/**
	 * \brief setC2.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None setC2(DQuaternion self, float v) {}

	/**
	 * \brief getC1.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public float getC1(DQuaternion self) {}

	/**
	 * \brief getC2.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public float getC2(DQuaternion self) {}

	/**
	 * \brief getC3.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public float getC3(DQuaternion self) {}

	/**
	 * \brief setC1.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None setC1(DQuaternion self, float v) {}

	/**
	 * \brief setC3.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public None setC3(DQuaternion self, float v) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion assign(DQuaternion self, ConstFQuaternionExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion assign(DQuaternion self, ConstDQuaternionExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion assign(DQuaternion self, ConstLQuaternionExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion assign(DQuaternion self, ConstULQuaternionExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion assign(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __isub__(DQuaternion self, float t) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __isub__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __isub__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public str __str__(DQuaternion self) {}

	/**
	 * \brief __radd__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __radd__(object self, float t) {}

	/**
	 * \brief __rsub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __rsub__(object self, float t) {}

	/**
	 * \brief __rdiv__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __rdiv__(object self, float t) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __pos__(DQuaternion self) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __mul__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __mul__(object self, ConstDQuaternionExpression e) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public bool __ne__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public bool __ne__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __idiv__(DQuaternion self, float t) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __idiv__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __idiv__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __add__(object self, float t) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __add__(object self, ConstDQuaternionExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public bool __eq__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public bool __eq__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __imul__(DQuaternion self, float t) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __imul__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __imul__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __iadd__(DQuaternion self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __iadd__(DQuaternion self, DQuaternion q) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public DQuaternion __iadd__(DQuaternion self, ConstDQuaternionExpression q) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __div__(object self, float t) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __div__(object self, ConstDQuaternionExpression e) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __sub__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%DQuaternion</tt> instance.
	 */
	public ConstDQuaternionExpression __sub__(object self, ConstDQuaternionExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;
}
