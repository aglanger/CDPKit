/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstDMatrixRow.
 */
public class ConstDMatrixRow extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public None __init__(object self, ConstDMatrixRow r) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public None __init__(object self, ConstDMatrixExpression e, int i) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public int getObjectID(ConstDMatrixRow self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public int getSize(ConstDMatrixRow self) {}

	/**
	 * \brief getIndex.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public int getIndex(ConstDMatrixRow self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public float getElement(ConstDMatrixRow self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public bool isEmpty(ConstDMatrixRow self) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDMatrixExpression getData(ConstDMatrixRow self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public str __str__(ConstDMatrixRow self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDMatrixRow __pos__(ConstDMatrixRow self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public float __call__(ConstDMatrixRow self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public int __len__(ConstDMatrixRow self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public bool __ne__(ConstDMatrixRow self, ConstDMatrixRow r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public bool __ne__(ConstDMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public float __getitem__(ConstDMatrixRow self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public bool __eq__(ConstDMatrixRow self, ConstDMatrixRow r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public bool __eq__(ConstDMatrixRow self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstDMatrixRow</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief index.
	 */
	public None index;

	/**
	 * \brief data.
	 */
	public None data;
}
