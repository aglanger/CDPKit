/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstFVectorRange.
 */
public class ConstFVectorRange extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public None __init__(object self, ConstFVectorRange r) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public None __init__(object self, ConstFVectorExpression e, Range r) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public int getObjectID(ConstFVectorRange self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public int getSize(ConstFVectorRange self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public float getElement(ConstFVectorRange self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public bool isEmpty(ConstFVectorRange self) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression getData(ConstFVectorRange self) {}

	/**
	 * \brief getStart.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public int getStart(ConstFVectorRange self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public str __str__(ConstFVectorRange self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorRange __pos__(ConstFVectorRange self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public float __call__(ConstFVectorRange self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public int __len__(ConstFVectorRange self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public bool __ne__(ConstFVectorRange self, ConstFVectorRange r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public bool __ne__(ConstFVectorRange self, ConstFVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public float __getitem__(ConstFVectorRange self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __add__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public bool __eq__(ConstFVectorRange self, ConstFVectorRange r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public bool __eq__(ConstFVectorRange self, ConstFVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstFVectorRange</tt> instance.
	 */
	public ConstFVectorExpression __sub__(object self, ConstFVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief start.
	 */
	public None start;

	/**
	 * \brief data.
	 */
	public None data;
}
