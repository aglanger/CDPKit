/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief Matrix3D.
 */
public class Matrix3D extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None __init__(object self, float v) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None __init__(object self, Matrix3D m) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public object __init__(object arg1, ConstFMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public object __init__(object arg1, ConstDMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public object __init__(object arg1, ConstLMatrixExpression e) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public object __init__(object arg1, ConstULMatrixExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public int getObjectID(Matrix3D self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public float getElement(Matrix3D self, int i, int j) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public bool isEmpty(Matrix3D self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None swap(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief getSize1.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public int getSize1(Matrix3D self) {}

	/**
	 * \brief getSize2.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public int getSize2(Matrix3D self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None setElement(Matrix3D self, int i, int j, float v) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None clear(Matrix3D self, float v = 0.0) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D assign(Matrix3D self, ConstFMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D assign(Matrix3D self, ConstDMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D assign(Matrix3D self, ConstLMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D assign(Matrix3D self, ConstULMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D assign(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __isub__(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __isub__(Matrix3D self, ConstDMatrixExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public str __str__(Matrix3D self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __pos__(Matrix3D self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public float __call__(Matrix3D self, int i, int j) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public int __len__(Matrix3D self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public bool __ne__(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public bool __ne__(Matrix3D self, ConstDMatrixExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public float __getitem__(Matrix3D self, tuple ij) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __idiv__(Matrix3D self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public None __setitem__(Matrix3D self, tuple ij, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __add__(object self, ConstDMatrixExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public bool __eq__(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public bool __eq__(Matrix3D self, ConstDMatrixExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __imul__(Matrix3D self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __iadd__(Matrix3D self, Matrix3D m) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public Matrix3D __iadd__(Matrix3D self, ConstDMatrixExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __mul__(object self, float t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%Matrix3D</tt> instance.
	 */
	public ConstDMatrixExpression __sub__(object self, ConstDMatrixExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size1.
	 */
	public None size1;

	/**
	 * \brief size2.
	 */
	public None size2;
}
