/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief LMatrixSlice.
 */
public class LMatrixSlice extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public None __init__(object self, LMatrixSlice s) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public None __init__(object self, LMatrixExpression e, Slice s1, Slice s2) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getObjectID(LMatrixSlice self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getElement(LMatrixSlice self, int i, int j) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public bool isEmpty(LMatrixSlice self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public None swap(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixExpression getData(LMatrixSlice self) {}

	/**
	 * \brief getSize1.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getSize1(LMatrixSlice self) {}

	/**
	 * \brief getSize2.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getSize2(LMatrixSlice self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public None setElement(LMatrixSlice self, int i, int j, int v) {}

	/**
	 * \brief getStride2.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getStride2(LMatrixSlice self) {}

	/**
	 * \brief getStride1.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getStride1(LMatrixSlice self) {}

	/**
	 * \brief getStart1.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getStart1(LMatrixSlice self) {}

	/**
	 * \brief getStart2.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int getStart2(LMatrixSlice self) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice assign(LMatrixSlice self, ConstFMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice assign(LMatrixSlice self, ConstDMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice assign(LMatrixSlice self, ConstLMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice assign(LMatrixSlice self, ConstULMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice assign(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __isub__(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __isub__(LMatrixSlice self, ConstLMatrixExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public str __str__(LMatrixSlice self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __pos__(LMatrixSlice self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int __call__(LMatrixSlice self, int i, int j) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int __len__(LMatrixSlice self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public bool __ne__(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public bool __ne__(LMatrixSlice self, ConstLMatrixExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public int __getitem__(LMatrixSlice self, tuple ij) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __idiv__(LMatrixSlice self, int t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public None __setitem__(LMatrixSlice self, tuple ij, int v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __add__(object self, ConstLMatrixExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public bool __eq__(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public bool __eq__(LMatrixSlice self, ConstLMatrixExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __imul__(LMatrixSlice self, int t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __iadd__(LMatrixSlice self, LMatrixSlice s) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public LMatrixSlice __iadd__(LMatrixSlice self, ConstLMatrixExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __mul__(object self, int t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%LMatrixSlice</tt> instance.
	 */
	public ConstLMatrixExpression __sub__(object self, ConstLMatrixExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief stride2.
	 */
	public None stride2;

	/**
	 * \brief stride1.
	 */
	public None stride1;

	/**
	 * \brief size1.
	 */
	public None size1;

	/**
	 * \brief start2.
	 */
	public None start2;

	/**
	 * \brief data.
	 */
	public None data;

	/**
	 * \brief start1.
	 */
	public None start1;

	/**
	 * \brief size2.
	 */
	public None size2;
}
