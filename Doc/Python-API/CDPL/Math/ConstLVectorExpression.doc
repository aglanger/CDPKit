/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstLVectorExpression.
 */
public class ConstLVectorExpression extends Boost.Python.instance {

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int getObjectID(ConstLVectorExpression self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int getSize(ConstLVectorExpression self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int getElement(ConstLVectorExpression self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public bool isEmpty(ConstLVectorExpression self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public str __str__(ConstLVectorExpression self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __rmul__(object self, int t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __pos__(ConstLVectorExpression self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int __call__(ConstLVectorExpression self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int __len__(ConstLVectorExpression self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public bool __ne__(ConstLVectorExpression self, ConstLVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public int __getitem__(ConstLVectorExpression self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __add__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public bool __eq__(ConstLVectorExpression self, ConstLVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __div__(object self, int t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __mul__(object self, int t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstLVectorExpression</tt> instance.
	 */
	public ConstLVectorExpression __sub__(object self, ConstLVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;
}
