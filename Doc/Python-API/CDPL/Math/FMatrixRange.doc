/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief FMatrixRange.
 */
public class FMatrixRange extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public None __init__(object self, FMatrixRange r) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public None __init__(object self, FMatrixExpression e, Range r1, Range r2) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int getObjectID(FMatrixRange self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public float getElement(FMatrixRange self, int i, int j) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public bool isEmpty(FMatrixRange self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public None swap(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixExpression getData(FMatrixRange self) {}

	/**
	 * \brief getSize1.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int getSize1(FMatrixRange self) {}

	/**
	 * \brief getSize2.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int getSize2(FMatrixRange self) {}

	/**
	 * \brief setElement.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public None setElement(FMatrixRange self, int i, int j, float v) {}

	/**
	 * \brief getStart1.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int getStart1(FMatrixRange self) {}

	/**
	 * \brief getStart2.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int getStart2(FMatrixRange self) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange assign(FMatrixRange self, ConstFMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange assign(FMatrixRange self, ConstDMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange assign(FMatrixRange self, ConstLMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange assign(FMatrixRange self, ConstULMatrixExpression e) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange assign(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __isub__(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __isub__(FMatrixRange self, ConstFMatrixExpression e) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public str __str__(FMatrixRange self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __pos__(FMatrixRange self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public float __call__(FMatrixRange self, int i, int j) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public int __len__(FMatrixRange self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public bool __ne__(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public bool __ne__(FMatrixRange self, ConstFMatrixExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public float __getitem__(FMatrixRange self, tuple ij) {}

	/**
	 * \brief __idiv__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __idiv__(FMatrixRange self, float t) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public None __setitem__(FMatrixRange self, tuple ij, float v) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __add__(object self, ConstFMatrixExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public bool __eq__(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public bool __eq__(FMatrixRange self, ConstFMatrixExpression e) {}

	/**
	 * \brief __imul__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __imul__(FMatrixRange self, float t) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __iadd__(FMatrixRange self, FMatrixRange r) {}

	/**
	 * \brief __iadd__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public FMatrixRange __iadd__(FMatrixRange self, ConstFMatrixExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __mul__(object self, float t) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __neg__(object self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%FMatrixRange</tt> instance.
	 */
	public ConstFMatrixExpression __sub__(object self, ConstFMatrixExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size1.
	 */
	public None size1;

	/**
	 * \brief start2.
	 */
	public None start2;

	/**
	 * \brief data.
	 */
	public None data;

	/**
	 * \brief start1.
	 */
	public None start1;

	/**
	 * \brief size2.
	 */
	public None size2;
}
