/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Math;

/**
 * \brief ConstDQuaternionVectorAdapter.
 */
public class ConstDQuaternionVectorAdapter extends Boost.Python.instance {

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public None __init__(object self, ConstDQuaternionVectorAdapter a) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public None __init__(object self, ConstDQuaternionExpression e) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public int getObjectID(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public int getSize(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief getElement.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public float getElement(ConstDQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public bool isEmpty(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief getData.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDQuaternionExpression getData(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public str __str__(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief __rmul__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __rmul__(object self, float t) {}

	/**
	 * \brief __pos__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDQuaternionVectorAdapter __pos__(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief __call__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public float __call__(ConstDQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public int __len__(ConstDQuaternionVectorAdapter self) {}

	/**
	 * \brief __neg__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __neg__(object self) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public bool __ne__(ConstDQuaternionVectorAdapter self, ConstDQuaternionVectorAdapter a) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public bool __ne__(ConstDQuaternionVectorAdapter self, ConstDVectorExpression e) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public float __getitem__(ConstDQuaternionVectorAdapter self, int i) {}

	/**
	 * \brief __add__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __add__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public bool __eq__(ConstDQuaternionVectorAdapter self, ConstDQuaternionVectorAdapter a) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public bool __eq__(ConstDQuaternionVectorAdapter self, ConstDVectorExpression e) {}

	/**
	 * \brief __div__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __div__(object self, float t) {}

	/**
	 * \brief __mul__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __mul__(object self, float t) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%ConstDQuaternionVectorAdapter</tt> instance.
	 */
	public ConstDVectorExpression __sub__(object self, ConstDVectorExpression e) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief data.
	 */
	public None data;
}
