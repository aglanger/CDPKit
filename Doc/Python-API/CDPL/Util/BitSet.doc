/* -*- mode: java; tab-width: 4 -*- */

package CDPL.Util;

/**
 * \brief BitSet.
 */
public class BitSet extends Boost.Python.instance {

	/**
	 * \brief npos.
	 */
	public static long npos = 18446744073709551615;

	/**
	 * \brief __init__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None __init__(object self) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None __init__(object self, BitSet bs) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None __init__(object self, int num_bits, int value = 0) {}

	/**
	 * \brief __init__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None __init__(object self, str bit_str) {}

	/**
	 * \brief hasAny.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool hasAny(BitSet self) {}

	/**
	 * \brief set.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet set(BitSet self) {}

	/**
	 * \brief set.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet set(BitSet self, int idx, bool value = True) {}

	/**
	 * \brief getObjectID.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int getObjectID(BitSet self) {}

	/**
	 * \brief getSize.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int getSize(BitSet self) {}

	/**
	 * \brief append.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None append(BitSet self, bool value) {}

	/**
	 * \brief isSubsetOf.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool isSubsetOf(BitSet self, BitSet bs) {}

	/**
	 * \brief isProperSubsetOf.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool isProperSubsetOf(BitSet self, BitSet bs) {}

	/**
	 * \brief findNext.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int findNext(BitSet self, int idx) {}

	/**
	 * \brief isEmpty.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool isEmpty(BitSet self) {}

	/**
	 * \brief swap.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None swap(BitSet self, BitSet bs) {}

	/**
	 * \brief hasNone.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool hasNone(BitSet self) {}

	/**
	 * \brief test.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool test(BitSet self, int idx) {}

	/**
	 * \brief findFirst.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int findFirst(BitSet self) {}

	/**
	 * \brief getCount.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int getCount(BitSet self) {}

	/**
	 * \brief resize.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None resize(BitSet self, int num_bits, bool value = False) {}

	/**
	 * \brief getMaxSize.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int getMaxSize(BitSet self) {}

	/**
	 * \brief reset.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet reset(BitSet self) {}

	/**
	 * \brief reset.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet reset(BitSet self, int idx) {}

	/**
	 * \brief clear.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None clear(BitSet self) {}

	/**
	 * \brief flip.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet flip(BitSet self) {}

	/**
	 * \brief flip.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet flip(BitSet self, int idx) {}

	/**
	 * \brief assign.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet assign(BitSet self, BitSet bs) {}

	/**
	 * \brief __isub__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __isub__(BitSet self, BitSet bs) {}

	/**
	 * \brief __str__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public str __str__(BitSet self) {}

	/**
	 * \brief __ilshift__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __ilshift__(BitSet self, int num_bits) {}

	/**
	 * \brief __irshift__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __irshift__(BitSet self, int num_bits) {}

	/**
	 * \brief __and__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __and__(BitSet self, BitSet bs) {}

	/**
	 * \brief __lt__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __lt__(BitSet self, BitSet bs) {}

	/**
	 * \brief __rshift__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __rshift__(BitSet self, int num_bits) {}

	/**
	 * \brief __iand__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __iand__(BitSet self, BitSet bs) {}

	/**
	 * \brief __invert__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __invert__(BitSet self) {}

	/**
	 * \brief __ixor__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __ixor__(BitSet self, BitSet bs) {}

	/**
	 * \brief __getitem__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __getitem__(BitSet self, int idx) {}

	/**
	 * \brief __setitem__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public None __setitem__(BitSet self, int idx, bool value) {}

	/**
	 * \brief __or__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __or__(BitSet self, BitSet bs) {}

	/**
	 * \brief __lshift__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __lshift__(BitSet self, int num_bits) {}

	/**
	 * \brief __gt__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __gt__(BitSet self, BitSet bs) {}

	/**
	 * \brief __ne__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __ne__(BitSet self, BitSet bs) {}

	/**
	 * \brief __eq__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __eq__(BitSet self, BitSet bs) {}

	/**
	 * \brief __nonzero__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __nonzero__(BitSet self) {}

	/**
	 * \brief __xor__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __xor__(BitSet self, BitSet bs) {}

	/**
	 * \brief __ior__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __ior__(BitSet self, BitSet bs) {}

	/**
	 * \brief __le__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __le__(BitSet self, BitSet bs) {}

	/**
	 * \brief __len__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int __len__(BitSet self) {}

	/**
	 * \brief __sub__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public BitSet __sub__(BitSet self, BitSet bs) {}

	/**
	 * \brief __long__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public int __long__(BitSet self) {}

	/**
	 * \brief __ge__.
	 * \param self The <tt>%BitSet</tt> instance.
	 */
	public bool __ge__(BitSet self, BitSet bs) {}

	/**
	 * \brief objectID.
	 */
	public None objectID;

	/**
	 * \brief maxSize.
	 */
	public None maxSize;

	/**
	 * \brief any.
	 */
	public None any;

	/**
	 * \brief size.
	 */
	public None size;

	/**
	 * \brief empty.
	 */
	public None empty;

	/**
	 * \brief count.
	 */
	public None count;

	/**
	 * \brief none.
	 */
	public None none;
}
